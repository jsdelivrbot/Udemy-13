import React, { Component } from 'react';
import { Link } from 'react-router-dom';
import { Field, reduxForm } from 'redux-form';
//Field is to hold the inputs, but not showing them
//Field.props.component defines how to show the form Field
//reduxFrom is a function like "connect", to wire up the formReducer
import { connect } from 'react-redux';
import { createPost } from '../actions';

class PostsNew extends Component {
  renderField(field) {
    //distructing field.meta.xxx
    const { meta: {touched, error} } = field;
    const className = `form-group ${touched && error ? 'has-danger' : ''}`

    return(
      <div className={className}>
        <label>{field.label}</label>
        <input
          className='form-control'
          type='text'
          {...field.input}
          //onChange = {field.input.onChange}
          //onFocus = {field.input.onFocus}
          //...
        />
        <div className='text-help'>
          {/* if the input is untouched, show '',
              otherwise, show the result of validation */}
          {touched ? error : ''}
          {/* field.meta.xxx is automatically generated by field
              field.meta.error is automatically generated by validation function*/}
        </div>
      </div>
    );
  }

  onSubmit(values) {
    //this === component
    this.props.createPost(values, () => {
      this.props.history.push('/');
    });
  }

  render() {
    const { handleSubmit } = this.props;
    //this.props is from reduxForm, handleSubmit is a property of this.props
    //just like connect add new props to the component

    return(
      //handleSubmit is doing the reduxForm side thing to validate inputs
      //and if it's valid, it call the callback function this.onSubmit
      <form onSubmit={handleSubmit(this.onSubmit.bind(this))}>
        <Field
          label='Title for Post'
          name='title'
          //show the Field
          component={this.renderField}
        />
        <Field
          label='Categories'
          name='categories'
          component={this.renderField}
        />
        <Field
          label='Post Content'
          name='content'
          component={this.renderField}
        />
        <button type='submit' className='btn btn-primary'>
          Submit
        </button>
        <Link className='btn btn-danger' to='/'>
          Cancel
        </Link>
      </form>
    );
  }
}

function validate(values) {
  //values = {title: '...', categories: '...', content: '...'}
  const error = {};
  //validate the inputs from values
  if (!values.title || values.title.length < 3) {
    //error.FieldName
    error.title = 'Enter a title that has at least 3 characters!';
  }

  if (!values.categories) {
    error.categories = 'Enter some categories!';
  }

  if (!values.content) {
    error.content = 'Enter some content!';
  }

  //if error is empty, the form is fine to submit
  //if error has any property, redux assumes form invalid
  return error;
}

export default reduxForm({
  //validate: validate,
  validate,
  form: 'PostsNewForm'  //unique string to identify different forms
})(
  connect(null, { createPost })(PostsNew)
);
//nested helpers, reduxForm and connect
